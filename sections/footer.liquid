<style>
    .footer-row {
        margin: 0 0 {{ section.settings.bottom_margin }}px 0;
        padding: 0 {{ section.settings.side_padding }}px;
    }
    .footer-row .attribution {
        justify-content: {{ section.settings.attribution_align }};
    }
</style>

<div class="footer-row">

    {% comment %} 
    //==================
    // LEFT
    //==================
    {% endcomment %}
    {% if section.settings.footer_selection == 'left_logo' %}
        <div class="left-logo">

            <div class="branding">
                <div class="logo">
                    {% if section.settings.site_logo == blank %}
                        <a href="{{ shop.url }}" title="{{ shop.name }}">
                            {{ shop.name }}
                        </a>
                    {% else %}
                        <a href="{{ shop.url }}" title="{{ shop.name }}">
                            <img src="{{ section.settings.site_logo | image_url: width: 600 }}" alt="{{ section.settings.site_logo.alt }}" />
                        </a>
                    {% endif %}
                </div>
                <div class="site-description">
                    <p>{{ section.settings.site_description }}</p>
                </div>
            </div>

            <div class="menu-one">
                {% for block in section.blocks %}
                    {% if forloop.index == 1 %}
                        <div class="title">
                            <h3>{{ block.settings.menu_title }}</h3>
                        </div>
                        <div class="menu">
                            {% for link in block.settings.menu.links %}
                                <a href="{{ link.url }}" title="{{ link.title }}">{{ link.title }}</a>
                            {% endfor %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

            <div class="menu-two">
                {% for block in section.blocks %}
                    {% if forloop.index == 1 %}
                        <div class="title">
                            <h3>{{ block.settings.menu_title }}</h3>
                        </div>
                        <div class="menu">
                            {% for link in block.settings.menu.links %}
                                <a href="{{ link.url }}" title="{{ link.title }}">{{ link.title }}</a>
                            {% endfor %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

        </div>
    {% endif %}

    {% comment %} 
    //==================
    // CENTER
    //==================
    {% endcomment %}
    {% if section.settings.footer_selection == 'center_logo' %}
        <div class="center-logo">

            <div class="menu-one">
                {% for block in section.blocks %}
                    {% if forloop.index == 1 %}
                        <div class="title">
                            <h3>{{ block.settings.menu_title }}</h3>
                        </div>
                        <div class="menu">
                            {% for link in block.settings.menu.links %}
                                <a href="{{ link.url }}" title="{{ link.title }}">{{ link.title }}</a>
                            {% endfor %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

            <div class="branding">
                <div class="logo">
                    {% if section.settings.site_logo == blank %}
                        <a href="{{ shop.url }}" title="{{ shop.name }}">
                            {{ shop.name }}
                        </a>
                    {% else %}
                        <a href="{{ shop.url }}" title="{{ shop.name }}">
                            <img src="{{ section.settings.site_logo | image_url: width: 600 }}" alt="{{ section.settings.site_logo.alt }}" />
                        </a>
                    {% endif %}
                </div>
                <div class="site-description">
                    <p>{{ section.settings.site_description }}</p>
                </div>
            </div>

            <div class="menu-two">
                {% for block in section.blocks %}
                    {% if forloop.index == 1 %}
                        <div class="title">
                            <h3>{{ block.settings.menu_title }}</h3>
                        </div>
                        <div class="menu">
                            {% for link in block.settings.menu.links %}
                                <a href="{{ link.url }}" title="{{ link.title }}">{{ link.title }}</a>
                            {% endfor %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

        </div>
    {% endif %}

    <div class="attribution">
        {{ section.settings.attribution }}
        {% if section.settings.copyright_selector == true %}
            {{ shop.name }} {{ 'Copyright &copy;' }} {{ "now" | date: "%Y" }}
        {% endif %}
    </div>

</div>

<script>
    class Accordion {
        constructor(el) {
            // Store the <details> element
            this.el = el;
            // Store the <summary> element
            this.summary = el.querySelector('summary');
            // Store the <div class="content"> element
            this.content = el.querySelector('.accordion-body');

            // Store the animation object (so we can cancel it if needed)
            this.animation = null;
            // Store if the element is closing
            this.isClosing = false;
            // Store if the element is expanding
            this.isExpanding = false;
            // Detect user clicks on the summary element
            this.summary.addEventListener('click', (e) => this.onClick(e));
        }

        onClick(e) {
            // Stop default behaviour from the browser
            e.preventDefault();
            // Add an overflow on the <details> to avoid content overflowing
            this.el.style.overflow = 'hidden';
            // Check if the element is being closed or is already closed
            if (this.isClosing || !this.el.open) {
            this.open();
            // Check if the element is being openned or is already open
            } else if (this.isExpanding || this.el.open) {
            this.shrink();
            }
        }

        shrink() {
            // Set the element as "being closed"
            this.isClosing = true;
            
            // Store the current height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the height of the summary
            const endHeight = `${this.summary.offsetHeight}px`;
            
            // If there is already an animation running
            if (this.animation) {
            // Cancel the current animation
            this.animation.cancel();
            }
            
            // Start a WAAPI animation
            this.animation = this.el.animate({
                // Set the keyframes from the startHeight to endHeight
                height: [startHeight, endHeight]
                }, {
                duration: 400,
                easing: 'ease-out'
            });
            
            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(false);
            // If the animation is cancelled, isClosing variable is set to false
            this.animation.oncancel = () => this.isClosing = false;
        }

        open() {
            // Apply a fixed height on the element
            this.el.style.height = `${this.el.offsetHeight}px`;
            // Force the [open] attribute on the details element
            this.el.open = true;
            // Wait for the next frame to call the expand function
            window.requestAnimationFrame(() => this.expand());
        }

        expand() {
            // Set the element as "being expanding"
            this.isExpanding = true;
            // Get the current fixed height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the open height of the element (summary height + content height)
            const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;
            
            // If there is already an animation running
            if (this.animation) {
            // Cancel the current animation
            this.animation.cancel();
        }
        
        // Start a WAAPI animation
        this.animation = this.el.animate({
            // Set the keyframes from the startHeight to endHeight
            height: [startHeight, endHeight]
            }, {
            duration: 400,
            easing: 'ease-out'
            });
            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(true);
            // If the animation is cancelled, isExpanding variable is set to false
            this.animation.oncancel = () => this.isExpanding = false;
        }

        onAnimationFinish(open) {
            // Set the open attribute based on the parameter
            this.el.open = open;
            // Clear the stored animation
            this.animation = null;
            // Reset isClosing & isExpanding
            this.isClosing = false;
            this.isExpanding = false;
            // Remove the overflow hidden and the fixed height
            this.el.style.height = this.el.style.overflow = '';
        }
    }

    document.querySelectorAll('details').forEach((el) => {
        new Accordion(el);
    });
</script>

{% schema %}
    {
      "name": "Footer",
      "tag": "footer",
      "class": "footer-section",
      "limit": 1,
      "settings": [
        {
            "type": "select",
            "id": "footer_selection",
            "label": "Footer Layout",
            "options": [
                {
                    "value": "left_logo",
                    "label": "Left Logo"
                },
                {
                    "value": "center_logo",
                    "label": "Center Logo"
                }
            ]
        },
        {
            "type": "image_picker",
            "id": "site_logo",
            "label": "Logo"
        },
        {
          "type": "textarea",
          "id": "site_description",
          "label": "Site Description"
        },
        {
          "type": "text",
          "id": "attribution",
          "label": "Attribution"
        },
        {
            "type": "select",
            "id": "attribution_align",
            "label": "Attribution Alignment",
            "options": [
                {
                    "value": "flex-start",
                    "label": "Left"
                },
                {
                    "value": "center",
                    "label": "Center"
                },
                {
                    "value": "flex-end",
                    "label": "Right"
                }
            ]
        },
        {
            "type": "checkbox",
            "id": "copyright_selector",
            "label": "Show Copyright",
            "default": true
        },
        {
            "type": "range",
            "id": "side_padding",
            "label": "Side Padding",
            "min": 0,
            "max": 24,
            "step": 1,
            "default": 12
        },
        {
            "type": "range",
            "id": "bottom_margin",
            "label": "Space Below",
            "default": 60,
            "min": 0,
            "max": 100,
            "step": 1
        }
      ],
      "blocks": [
        {
            "type": "menu",
            "name": "Menu",
            "limit": 2,
            "settings": [
                {
                    "type": "text",
                    "id": "menu_title",
                    "label": "Menu Title"
                },
                {
                    "type": "link_list",
                    "id": "menu",
                    "label": "Menu"
                }
            ]
        }
      ],
      "presets": [
        {
          "name": "Footer"
        }
      ],
      "enabled_on": {
        "templates": ["*"]
      }
    }
{% endschema %}
    